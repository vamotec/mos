// This file is @generated by prost-build.
/// ================== Robot Control 模块 ==================
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetJointAnglesRequest {
    /// 目标关节角度列表
    #[prost(double, repeated, tag = "1")]
    pub angles: ::prost::alloc::vec::Vec<f64>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetJointAnglesRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetJointAnglesResponse {
    /// 当前关节角度列表
    #[prost(double, repeated, tag = "1")]
    pub angles: ::prost::alloc::vec::Vec<f64>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommandResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// ================== Task 模块 ==================
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskRequest {
    /// 任务 ID，客户端可选，由服务器分配
    #[prost(int64, optional, tag = "1")]
    pub id: ::core::option::Option<i64>,
    /// 优先级
    #[prost(uint32, tag = "2")]
    pub priority: u32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TaskResponse {
    /// 返回任务 ID（通常与请求一致）
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
/// ================== Telemetry 模块 ==================
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TelemetryRequest {
    /// 传感器 ID，例如 "camera_1"、"lidar_2"
    #[prost(string, tag = "1")]
    pub sensor_id: ::prost::alloc::string::String,
    /// 原始遥测数据（可选）
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// 时间戳（Unix 秒）
    #[prost(uint64, tag = "3")]
    pub timestamp: u64,
}
/// ✅ 新的 TelemetryData，用于流式下行
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TelemetryData {
    /// 数据来源，例如 "mock_sensor"
    #[prost(string, tag = "1")]
    pub source: ::prost::alloc::string::String,
    /// 传感器数值
    #[prost(double, tag = "2")]
    pub value: f64,
    /// 时间戳（秒）
    #[prost(uint64, tag = "3")]
    pub timestamp: u64,
}
/// ================== 通用响应（可选扩展） ==================
///
/// 如果未来某些 RPC 需要返回状态/错误信息，可以继续使用这个结构。
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TelemetryResponse {
    /// 响应 ID
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 是否成功
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// 响应消息
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod mos_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// 主服务：统一的机器人任务与遥测流接口
    #[derive(Debug, Clone)]
    pub struct MosClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MosClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MosClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MosClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MosClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 一次性任务调度（请求 -> 响应）
        pub async fn schedule_task(
            &mut self,
            request: impl tonic::IntoRequest<super::TaskRequest>,
        ) -> std::result::Result<tonic::Response<super::TaskResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/mos.Mos/ScheduleTask");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("mos.Mos", "ScheduleTask"));
            self.inner.unary(req, path, codec).await
        }
        /// 双向流式遥测通信（客户端可以发送 TelemetryRequest，服务端推送 TelemetryData）
        pub async fn stream_telemetry(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::TelemetryRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TelemetryData>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/mos.Mos/StreamTelemetry");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("mos.Mos", "StreamTelemetry"));
            self.inner.streaming(req, path, codec).await
        }
        /// 设置机器人关节角度
        pub async fn set_joint_angles(
            &mut self,
            request: impl tonic::IntoRequest<super::SetJointAnglesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/mos.Mos/SetJointAngles");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("mos.Mos", "SetJointAngles"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取机器人当前关节角度
        pub async fn get_joint_angles(
            &mut self,
            request: impl tonic::IntoRequest<super::GetJointAnglesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetJointAnglesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/mos.Mos/GetJointAngles");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("mos.Mos", "GetJointAngles"));
            self.inner.unary(req, path, codec).await
        }
    }
}
