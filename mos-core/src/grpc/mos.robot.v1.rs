// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Vector3 {
    #[prost(double, tag = "1")]
    pub x: f64,
    #[prost(double, tag = "2")]
    pub y: f64,
    #[prost(double, tag = "3")]
    pub z: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Quaternion {
    #[prost(double, tag = "1")]
    pub x: f64,
    #[prost(double, tag = "2")]
    pub y: f64,
    #[prost(double, tag = "3")]
    pub z: f64,
    #[prost(double, tag = "4")]
    pub w: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pose {
    #[prost(message, optional, tag = "1")]
    pub position: ::core::option::Option<Vector3>,
    #[prost(message, optional, tag = "2")]
    pub orientation: ::core::option::Option<Quaternion>,
}
/// 通用的指令响应消息
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommandResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// 包含成功或失败的详细信息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// 用于追踪指令的唯一ID
    #[prost(string, tag = "3")]
    pub command_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MoveToJointTargetRequest {
    /// 目标关节角度数组 (弧度)
    #[prost(double, repeated, tag = "1")]
    pub joint_positions: ::prost::alloc::vec::Vec<f64>,
    /// 可选: 运动速度比例 (0.0 to 1.0)
    #[prost(float, optional, tag = "2")]
    pub speed_ratio: ::core::option::Option<f32>,
    /// 可选: 运动加速度比例 (0.0 to 1.0)
    #[prost(float, optional, tag = "3")]
    pub acceleration_ratio: ::core::option::Option<f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MoveToPoseTargetRequest {
    #[prost(message, optional, tag = "1")]
    pub target_pose: ::core::option::Option<Pose>,
    #[prost(float, optional, tag = "2")]
    pub speed_ratio: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "3")]
    pub acceleration_ratio: ::core::option::Option<f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MoveLinearRequest {
    #[prost(message, optional, tag = "1")]
    pub target_pose: ::core::option::Option<Pose>,
    /// 直线运动速度 (例如: m/s)
    #[prost(float, optional, tag = "2")]
    pub speed: ::core::option::Option<f32>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetJointStateRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetJointStateResponse {
    #[prost(double, repeated, tag = "1")]
    pub position: ::prost::alloc::vec::Vec<f64>,
    #[prost(double, repeated, tag = "2")]
    pub velocity: ::prost::alloc::vec::Vec<f64>,
    /// or torque
    #[prost(double, repeated, tag = "3")]
    pub effort: ::prost::alloc::vec::Vec<f64>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetPoseRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPoseResponse {
    #[prost(message, optional, tag = "1")]
    pub pose: ::core::option::Option<Pose>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetRobotStatusRequest {}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetRobotStatusResponse {
    #[prost(enumeration = "get_robot_status_response::Status", tag = "1")]
    pub status: i32,
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
/// Nested message and enum types in `GetRobotStatusResponse`.
pub mod get_robot_status_response {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Status {
        Unspecified = 0,
        Idle = 1,
        Moving = 2,
        Stopped = 3,
        Error = 4,
        EmergencyStopped = 5,
    }
    impl Status {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATUS_UNSPECIFIED",
                Self::Idle => "IDLE",
                Self::Moving => "MOVING",
                Self::Stopped => "STOPPED",
                Self::Error => "ERROR",
                Self::EmergencyStopped => "EMERGENCY_STOPPED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "IDLE" => Some(Self::Idle),
                "MOVING" => Some(Self::Moving),
                "STOPPED" => Some(Self::Stopped),
                "ERROR" => Some(Self::Error),
                "EMERGENCY_STOPPED" => Some(Self::EmergencyStopped),
                _ => None,
            }
        }
    }
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StreamJointStateRequest {
    /// 数据发布的频率 (Hz)
    #[prost(int32, tag = "1")]
    pub publish_frequency: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMotionParametersRequest {
    /// 全局速度比例 (0.0 to 1.0)
    #[prost(float, tag = "1")]
    pub speed_ratio: f32,
    /// 全局加速度比例 (0.0 to 1.0)
    #[prost(float, tag = "2")]
    pub acceleration_ratio: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetToolFrameRequest {
    /// TCP相对于法兰盘的位姿
    #[prost(message, optional, tag = "1")]
    pub tcp_pose: ::core::option::Option<Pose>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPayloadRequest {
    /// 负载重量 (kg)
    #[prost(float, tag = "1")]
    pub mass: f32,
    /// 负载质心相对于TCP的坐标
    #[prost(message, optional, tag = "2")]
    pub center_of_gravity: ::core::option::Option<Vector3>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SetDigitalOutRequest {
    #[prost(int32, tag = "1")]
    pub pin_number: i32,
    /// true for HIGH, false for LOW
    #[prost(bool, tag = "2")]
    pub state: bool,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetDigitalInRequest {
    #[prost(int32, tag = "1")]
    pub pin_number: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetDigitalInResponse {
    #[prost(int32, tag = "1")]
    pub pin_number: i32,
    #[prost(bool, tag = "2")]
    pub state: bool,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EmergencyStopRequest {}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ClearFaultsRequest {}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SetPowerRequest {
    /// true for power on, false for power off
    #[prost(bool, tag = "1")]
    pub enable: bool,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ExecuteProgramRequest {
    #[prost(string, tag = "1")]
    pub program_name: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod robot_controller_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// RobotController Service 定义了与机器人硬件交互的所有接口
    #[derive(Debug, Clone)]
    pub struct RobotControllerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RobotControllerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RobotControllerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RobotControllerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RobotControllerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 控制机器人移动到指定的目标关节角度
        pub async fn move_to_joint_target(
            &mut self,
            request: impl tonic::IntoRequest<super::MoveToJointTargetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/MoveToJointTarget",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mos.robot.v1.RobotController", "MoveToJointTarget"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 控制机器人末端执行器移动到指定的笛卡尔空间位姿
        pub async fn move_to_pose_target(
            &mut self,
            request: impl tonic::IntoRequest<super::MoveToPoseTargetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/MoveToPoseTarget",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mos.robot.v1.RobotController", "MoveToPoseTarget"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 控制机器人末端执行器在笛卡尔空间内进行直线移动
        pub async fn move_linear(
            &mut self,
            request: impl tonic::IntoRequest<super::MoveLinearRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/MoveLinear",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mos.robot.v1.RobotController", "MoveLinear"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取机器人当前的关节状态 (角度, 速度, 力矩)
        pub async fn get_joint_state(
            &mut self,
            request: impl tonic::IntoRequest<super::GetJointStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetJointStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/GetJointState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mos.robot.v1.RobotController", "GetJointState"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 获取机器人末端执行器当前的笛卡尔空间位姿
        pub async fn get_pose(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPoseRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPoseResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/GetPose",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mos.robot.v1.RobotController", "GetPose"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取机器人整体状态 (例如: IDLE, MOVING, ERROR)
        pub async fn get_robot_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRobotStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetRobotStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/GetRobotStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mos.robot.v1.RobotController", "GetRobotStatus"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 订阅(流式接收)机器人关节状态的实时数据
        pub async fn stream_joint_state(
            &mut self,
            request: impl tonic::IntoRequest<super::StreamJointStateRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetJointStateResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/StreamJointState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mos.robot.v1.RobotController", "StreamJointState"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// 设置全局的运动参数，如速度和加速度比例
        pub async fn set_motion_parameters(
            &mut self,
            request: impl tonic::IntoRequest<super::SetMotionParametersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/SetMotionParameters",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mos.robot.v1.RobotController",
                        "SetMotionParameters",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 设置工具中心点(TCP)相对于法兰盘的位姿
        pub async fn set_tool_frame(
            &mut self,
            request: impl tonic::IntoRequest<super::SetToolFrameRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/SetToolFrame",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mos.robot.v1.RobotController", "SetToolFrame"));
            self.inner.unary(req, path, codec).await
        }
        /// 设置机器人携带的负载信息 (重量和质心)
        pub async fn set_payload(
            &mut self,
            request: impl tonic::IntoRequest<super::SetPayloadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/SetPayload",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mos.robot.v1.RobotController", "SetPayload"));
            self.inner.unary(req, path, codec).await
        }
        /// 设置数字输出端口的状态 (常用于简单夹爪)
        pub async fn set_digital_out(
            &mut self,
            request: impl tonic::IntoRequest<super::SetDigitalOutRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/SetDigitalOut",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mos.robot.v1.RobotController", "SetDigitalOut"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 获取数字输入端口的状态
        pub async fn get_digital_in(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDigitalInRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDigitalInResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/GetDigitalIn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mos.robot.v1.RobotController", "GetDigitalIn"));
            self.inner.unary(req, path, codec).await
        }
        /// 触发紧急停止
        pub async fn emergency_stop(
            &mut self,
            request: impl tonic::IntoRequest<super::EmergencyStopRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/EmergencyStop",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mos.robot.v1.RobotController", "EmergencyStop"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 清除故障/错误状态
        pub async fn clear_faults(
            &mut self,
            request: impl tonic::IntoRequest<super::ClearFaultsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/ClearFaults",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mos.robot.v1.RobotController", "ClearFaults"));
            self.inner.unary(req, path, codec).await
        }
        /// 控制机器人伺服电机上电/下电
        pub async fn set_power(
            &mut self,
            request: impl tonic::IntoRequest<super::SetPowerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/SetPower",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mos.robot.v1.RobotController", "SetPower"));
            self.inner.unary(req, path, codec).await
        }
        /// 执行一个预定义的程序
        pub async fn execute_program(
            &mut self,
            request: impl tonic::IntoRequest<super::ExecuteProgramRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mos.robot.v1.RobotController/ExecuteProgram",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mos.robot.v1.RobotController", "ExecuteProgram"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod robot_controller_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RobotControllerServer.
    #[async_trait]
    pub trait RobotController: std::marker::Send + std::marker::Sync + 'static {
        /// 控制机器人移动到指定的目标关节角度
        async fn move_to_joint_target(
            &self,
            request: tonic::Request<super::MoveToJointTargetRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 控制机器人末端执行器移动到指定的笛卡尔空间位姿
        async fn move_to_pose_target(
            &self,
            request: tonic::Request<super::MoveToPoseTargetRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 控制机器人末端执行器在笛卡尔空间内进行直线移动
        async fn move_linear(
            &self,
            request: tonic::Request<super::MoveLinearRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 获取机器人当前的关节状态 (角度, 速度, 力矩)
        async fn get_joint_state(
            &self,
            request: tonic::Request<super::GetJointStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetJointStateResponse>,
            tonic::Status,
        >;
        /// 获取机器人末端执行器当前的笛卡尔空间位姿
        async fn get_pose(
            &self,
            request: tonic::Request<super::GetPoseRequest>,
        ) -> std::result::Result<tonic::Response<super::GetPoseResponse>, tonic::Status>;
        /// 获取机器人整体状态 (例如: IDLE, MOVING, ERROR)
        async fn get_robot_status(
            &self,
            request: tonic::Request<super::GetRobotStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetRobotStatusResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamJointState method.
        type StreamJointStateStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetJointStateResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// 订阅(流式接收)机器人关节状态的实时数据
        async fn stream_joint_state(
            &self,
            request: tonic::Request<super::StreamJointStateRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamJointStateStream>,
            tonic::Status,
        >;
        /// 设置全局的运动参数，如速度和加速度比例
        async fn set_motion_parameters(
            &self,
            request: tonic::Request<super::SetMotionParametersRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 设置工具中心点(TCP)相对于法兰盘的位姿
        async fn set_tool_frame(
            &self,
            request: tonic::Request<super::SetToolFrameRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 设置机器人携带的负载信息 (重量和质心)
        async fn set_payload(
            &self,
            request: tonic::Request<super::SetPayloadRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 设置数字输出端口的状态 (常用于简单夹爪)
        async fn set_digital_out(
            &self,
            request: tonic::Request<super::SetDigitalOutRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 获取数字输入端口的状态
        async fn get_digital_in(
            &self,
            request: tonic::Request<super::GetDigitalInRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDigitalInResponse>,
            tonic::Status,
        >;
        /// 触发紧急停止
        async fn emergency_stop(
            &self,
            request: tonic::Request<super::EmergencyStopRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 清除故障/错误状态
        async fn clear_faults(
            &self,
            request: tonic::Request<super::ClearFaultsRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 控制机器人伺服电机上电/下电
        async fn set_power(
            &self,
            request: tonic::Request<super::SetPowerRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
        /// 执行一个预定义的程序
        async fn execute_program(
            &self,
            request: tonic::Request<super::ExecuteProgramRequest>,
        ) -> std::result::Result<tonic::Response<super::CommandResponse>, tonic::Status>;
    }
    /// RobotController Service 定义了与机器人硬件交互的所有接口
    #[derive(Debug)]
    pub struct RobotControllerServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RobotControllerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RobotControllerServer<T>
    where
        T: RobotController,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/mos.robot.v1.RobotController/MoveToJointTarget" => {
                    #[allow(non_camel_case_types)]
                    struct MoveToJointTargetSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::MoveToJointTargetRequest>
                    for MoveToJointTargetSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MoveToJointTargetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::move_to_joint_target(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MoveToJointTargetSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/MoveToPoseTarget" => {
                    #[allow(non_camel_case_types)]
                    struct MoveToPoseTargetSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::MoveToPoseTargetRequest>
                    for MoveToPoseTargetSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MoveToPoseTargetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::move_to_pose_target(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MoveToPoseTargetSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/MoveLinear" => {
                    #[allow(non_camel_case_types)]
                    struct MoveLinearSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::MoveLinearRequest>
                    for MoveLinearSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MoveLinearRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::move_linear(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MoveLinearSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/GetJointState" => {
                    #[allow(non_camel_case_types)]
                    struct GetJointStateSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::GetJointStateRequest>
                    for GetJointStateSvc<T> {
                        type Response = super::GetJointStateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetJointStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::get_joint_state(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetJointStateSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/GetPose" => {
                    #[allow(non_camel_case_types)]
                    struct GetPoseSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::GetPoseRequest>
                    for GetPoseSvc<T> {
                        type Response = super::GetPoseResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPoseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::get_pose(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPoseSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/GetRobotStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetRobotStatusSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::GetRobotStatusRequest>
                    for GetRobotStatusSvc<T> {
                        type Response = super::GetRobotStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRobotStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::get_robot_status(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetRobotStatusSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/StreamJointState" => {
                    #[allow(non_camel_case_types)]
                    struct StreamJointStateSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::ServerStreamingService<
                        super::StreamJointStateRequest,
                    > for StreamJointStateSvc<T> {
                        type Response = super::GetJointStateResponse;
                        type ResponseStream = T::StreamJointStateStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StreamJointStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::stream_joint_state(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StreamJointStateSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/SetMotionParameters" => {
                    #[allow(non_camel_case_types)]
                    struct SetMotionParametersSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::SetMotionParametersRequest>
                    for SetMotionParametersSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetMotionParametersRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::set_motion_parameters(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetMotionParametersSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/SetToolFrame" => {
                    #[allow(non_camel_case_types)]
                    struct SetToolFrameSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::SetToolFrameRequest>
                    for SetToolFrameSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetToolFrameRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::set_tool_frame(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetToolFrameSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/SetPayload" => {
                    #[allow(non_camel_case_types)]
                    struct SetPayloadSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::SetPayloadRequest>
                    for SetPayloadSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetPayloadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::set_payload(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetPayloadSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/SetDigitalOut" => {
                    #[allow(non_camel_case_types)]
                    struct SetDigitalOutSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::SetDigitalOutRequest>
                    for SetDigitalOutSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetDigitalOutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::set_digital_out(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetDigitalOutSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/GetDigitalIn" => {
                    #[allow(non_camel_case_types)]
                    struct GetDigitalInSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::GetDigitalInRequest>
                    for GetDigitalInSvc<T> {
                        type Response = super::GetDigitalInResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDigitalInRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::get_digital_in(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDigitalInSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/EmergencyStop" => {
                    #[allow(non_camel_case_types)]
                    struct EmergencyStopSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::EmergencyStopRequest>
                    for EmergencyStopSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmergencyStopRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::emergency_stop(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EmergencyStopSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/ClearFaults" => {
                    #[allow(non_camel_case_types)]
                    struct ClearFaultsSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::ClearFaultsRequest>
                    for ClearFaultsSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ClearFaultsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::clear_faults(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ClearFaultsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/SetPower" => {
                    #[allow(non_camel_case_types)]
                    struct SetPowerSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::SetPowerRequest>
                    for SetPowerSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetPowerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::set_power(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetPowerSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mos.robot.v1.RobotController/ExecuteProgram" => {
                    #[allow(non_camel_case_types)]
                    struct ExecuteProgramSvc<T: RobotController>(pub Arc<T>);
                    impl<
                        T: RobotController,
                    > tonic::server::UnaryService<super::ExecuteProgramRequest>
                    for ExecuteProgramSvc<T> {
                        type Response = super::CommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ExecuteProgramRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RobotController>::execute_program(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ExecuteProgramSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RobotControllerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "mos.robot.v1.RobotController";
    impl<T> tonic::server::NamedService for RobotControllerServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
